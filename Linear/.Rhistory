vec <- c(1,2,3,4,5,6,2,9,4,8)
vec
#calculate sum of vector
total <- sum(vec)
total
#calculate mean of vector
av <- mean(vec)
av
#calculate product of vector
mul <- prod(vec)
mul
minimum <- min(vec)
minimum
maximum <- max(vec)
maximum
sorting <- sort(vec)
sorting
name <- c("rambo","julia","alice","bob","charlie")
age <- c(25,30,11,34,22)
hair <- c("black","brown","blond","white","gray")
address <- c("teaxs","california","arizona","missouri","miami")
people <- data.frame(name,age,hair,address)
people
people$name
write.csv(people,"E\\R\\Exported file.csv", row.names = FALSE)
write.csv(people,"E:\\R\\Exported file.csv", row.names = FALSE)
write.csv(people,"E:\\R\\Exported file.csv", row.names = FALSE)
mysummary <- function(x,y) {
if x > 23 {
sum(x)
}
else print("less than 23")
}
mysummary <- function(x,y) {
if x > 23 {
sum(x)
}
else print("less than 23")
}
mysummary <- function(x,y) {
if x > 23 {
sum(x)
} else print("less than 23")
}
dollar_to_euro <- function(x) {
euro <- (x * 0.89)
}
dollar_to_euro(1)
dollar_to_euro <- function(x) {
euro <- (x * 0.89)
return euro
}
dollar_to_euro <- function(x) {
euro <- (x * 0.89)
return (euro)
}
dollar_to_euro(1)
dollar_to_euro(100)
dollar_to_euro(12)
a <- 1,2
a <- 1
a
getOption('defaultPackages')
x <- c(3,7,NA,4,7)
x <- c(3,7,NA,4,7)
y <- c(5,NA,1,2,2)
x <- c(3,7,NA,4,7)
y <- c(5,NA,1,2,2)
x+y
x-y
x*y
a <- c(1,"a", FALSE)
type(a)
mode(a)
mode(x)
mode(a)
b <- c(1,2,"a",FALSE)
mode(b)
b <- c(1,2,3,"a",FALSE)
mode(b)
b <- c(1,2,3,"a")
mode(b)
b <- c(1,2,3,FALSE)
mode(b)
b <- 2:7
b
length(b)
b <- c(TRUE,TRUE,1)
b
mode(b)
x<- 1:3
x
typeof(x)
mode(x)
x <- c("nabin","john","dan","neal")
y <- c(27,22,42,13)
data.frame(x,y)
row.names(x)
print(row.names(x))
a =data.frame(x,y)
print(row.names(a))
`colnames<-`(x,name_of_person)
`colnames<-`(a,x)
`colnames<-`(names,x)
`colnames<-`(g,x)
`colnames<-`(y,x)
df <- data.frame(x = c(TRUE, FALSE, NA, NA), y = c(12, 34, 56, 78))
df
row.names(df) <- 1 : 4
df
row.names(df) <- 1 : 3
df
row.names(df) <- 1 : 4
df
row.names
row.names(df)
x <- c("a","b","v")
typeof(x)
x[1]
typeof(x[1])
a
matrix(a)
v = matrix(a)
v
v = matrix(data = a)
v
matrixf()
v = as.matrix(data = a)
as.matrix.data.frame(a)
a
v = as.matrix.data.frame(a)
v
x <- ("a","b")
as.logical(a)
a <- ("a","b")
a <- c("a","b")
a
mode(a)
as.logical(a)
installed.packages()
install.packages(for,depends = TRUE)
install.packages("for",depends = TRUE)
lib()
package
library()
install.packages("stas")
install.packages("util")
install.packages("saptial")
install.packages("lang")
options(digits=16)
20/6
x <- 1
x
objects(x)
print(objects(x))
names()
Names <- C("Ann","Bob","Charlie","Dan","Eva","Felix","George","Heather","Isabel")
Names <- c("Ann","Bob","Charlie","Dan","Eva","Felix","George","Heather","Isabel")
Names
Age <- c(12,22,44,12,66,34,23,73,11)
Age
Gender <- c("F","M","M","M","F","M","M","F","F")
data <- data.frame(Names,Age,Gender)
data
data$Gender
data$Age[3:]
data$Age(3: )
data$Age[3: ]
data$Age, n=5
data$Age n=5
data$Age(n=5)
head(data$Age,n=5)
head(data$Age,n=5,desc)
tail(data$Age,n=5,desc)
tail(data$Age,n=5)
data$Age[1:2]
view(data$Age)
View(data$Age)
c = View(data$Age)
c = View(data$Age[5:])
c = View(data$Age[5: ])
c = View(data$Age[5:9])
c
data
data$Age$Gender
data$Age,Gender
data$Age
data[data$Age & data$Gender]
data[data$Age == 12 & data$Gender == "F"]
data[data$Age <= 100 & data$Gender == "F"]
c = View(data$Age[5:9])
data[data$Age <= 100 & data$Gender == "F"]
data[data$Age & data$Gender == "F"]
data[data$Gender == "F"]
data[data$Gender == "F"]
data[data$Gender == "F",]
data[data$Gender == "F",2]
data[data$Gender == "F",2,3]
data[data$Gender == "F",2-3]
data[data$Gender == "F",2-3]
data[data$Gender == "M" & data$Age > 20]
data[data$Gender == "M" & data$Age > 20,]
1
data[data$Gender == "M" & data$Age > 20,2]
data[data$Gender == "M" & data$Age > 20,1]
data$Names
data$Age
Names <- c("Ann","Bob","Charlie","Dan","Eva","Felix","George","Heather","Isabel")
Age <- c(12,22,44,12,66,34,23,73,11)
Gender <- c("F","M","M","M","F","M","M","F","F")
data <- data.frame(Names,Age,Gender)
data
data$Gender
tail(data$Age,n=5)
data[5:9,2, drop = FALSE]
data[data$Gender == "F",2-3]
data[data$Gender == "M" & data$Age > 20,1]
data$Age
library(forecast)
data <- gas
data <- gas
head(data)
data
library(forecast)
data <- gas
data
str(data)
summary(data)
# Australian monthly gas production
head(data)
library(forecast)
data <- gas
# Australian monthly gas production
head(data)
# Australian monthly gas production
head(data)
plot(data)
library(fUnitRoots)
install.packages("fUnitRoots")
library(fUnitRoots)
library(forecast)
library(fUnitRoots)
data <- gas
# Australian monthly gas production
head(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
adfTest(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTable(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#showing values
10^(pred$pred)
summary(ARIMAfit)
#predicting the future values
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#showing values
10^(pred$pred)
# Australian monthly gas production
tail(data)
plot(pred)
plot(10^(pred$pred))
pred
plot(forecast(ARIMAfit, h=36))
library(forecast)
library(fUnitRoots)
data <- gas
# Australian monthly gas production
tail(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values
pred <- predict(ARIMAfit, n.ahead = 36)
#predicting the future values for three years i.e 36 month
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#integral. showing the values
10^(pred$pred)
plot(forecast(ARIMAfit, h=36))
library(forecast)
data <-woolyrng
data <-woolyrng
data <- woolyrng
data <- woolyrnq
head(data)
data
library(forecast)
#importing the data
data <- woolyrnq
#looking the data
head(data)
data
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
library(forecast)
library(fUnitRoots)
#importing the data
data <- woolyrnq
#looking the data
head(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values for three years i.e 36 month
pred <- predict(ARIMAfit, n.ahead = 36)
pred
10^(pred$pred)
#integral. showing the values
10^(pred$pred)
plot(forecast(ARIMAfit, h=36))
library(forecast)
library(fUnitRoots)
#importing the data
data <- woolyrnq
#looking the data
head(data)
#looking the data
tail(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values for three years i.e 36 month
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#integral. showing the values
10^(pred$pred)
#predicting the future values for three years i.e 36 month
pred <- predict(ARIMAfit, n.ahead = 12)
pred
#integral. showing the values
10^(pred$pred)
plot(forecast(ARIMAfit, h=36))
plot(forecast(ARIMAfit, h=12))
library(forecast)
library(fUnitRoots)
#importing the data
data <- woolyrnq
#looking the data
tail(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values for three years i.e 12
pred <- predict(ARIMAfit, n.ahead = 12)
pred
#integral. showing the values
10^(pred$pred)
plot(forecast(ARIMAfit, h=12))
library(forecast)
library(fUnitRoots)
#importing the data
data <- woolyrnq
#looking the data
tail(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values for three years i.e 36
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#integral. showing the values
10^(pred$pred)
plot(forecast(ARIMAfit, h=36))
library(boot)
library(car)
library(QuantPsyc)
library(lmtest)
library(sandwich)
library(vars)
library(nortest)
library(MASS)
library(boot)
library(car)
library(QuantPsyc)
library(lmtest)
library(sandwich)
library(vars)
library(nortest)
library(MASS)
#setting the working directory
getwd()
setwd("E:\\Helpism\\Linear")
#loading data
data <- read.csv("data.csv")
#checking the first 6 rows of data
head(data)
#checking the first 6 rows of data
head(data)
#checking the structure of data
str(data)
#checking the mean, median, quartile of data
summary(data)
#displaying the dependent variable through boxplot; to see the outliers
boxplot(data$SalesInThousands)
#displaying the dependent variable through boxplot; to see the outliers
boxplot(data$SalesInThousands)
#checking the outliers through quartile.
quantile(data$SalesInThousands, c(0,0.05,0.1,0.25,0.5,0.75,0.90,0.95,0.99,0.995,1))
#removing the outliers
data2 <- data[data$SalesInThousands <75, ]
data3 <- data2[data2$SalesInThousands >20, ]
#displaying the dependent variable through box  plot; to see the outliers
boxplot(data2$SalesInThousands)
boxplot(data3$SalesInThousands)
#checking for missing values
sapply(data3, function(x) sum(is.na(x)))
#removing null values if any
data3 <- na.omit(data3)
data <- data3
nrow(data)
#fitting into a linear model
fit<- lm(SalesInThousands ~ MarketID + MarketSize +	LocationID +	AgeOfStore +	Promotion +
week, data=data)
summary(fit)
#keeping only significant codes
final_fit<- lm(SalesInThousands ~  MarketSize +	AgeOfStore +	Promotion, data=data)
summary(final_fit)
##Assumption Diagnostic Tests
#Multicollinearity Test
#checking the VIF score; vif>2 means presence of multicollinearity
vif(final_fit)
## Get the predicted or fitted values
fitted(final_fit)
## MAPE
data$pred <- fitted(final_fit)
#Calculating MAPE
attach(data)
data
(sum((abs(data$SalesInThousands-data$pred))/data$SalesInThousands))/nrow(data)
dwt(final_fit)
bptest(final_fit)
resids <- final_fit$residuals
#get Anderson-Darling test for normality
ad.test(resids)
#writing in excel
write.csv(data,"linear_output.csv")
