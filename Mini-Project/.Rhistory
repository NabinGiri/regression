install.packages("saptial")
install.packages("lang")
options(digits=16)
20/6
x <- 1
x
objects(x)
print(objects(x))
names()
Names <- C("Ann","Bob","Charlie","Dan","Eva","Felix","George","Heather","Isabel")
Names <- c("Ann","Bob","Charlie","Dan","Eva","Felix","George","Heather","Isabel")
Names
Age <- c(12,22,44,12,66,34,23,73,11)
Age
Gender <- c("F","M","M","M","F","M","M","F","F")
data <- data.frame(Names,Age,Gender)
data
data$Gender
data$Age[3:]
data$Age(3: )
data$Age[3: ]
data$Age, n=5
data$Age n=5
data$Age(n=5)
head(data$Age,n=5)
head(data$Age,n=5,desc)
tail(data$Age,n=5,desc)
tail(data$Age,n=5)
data$Age[1:2]
view(data$Age)
View(data$Age)
c = View(data$Age)
c = View(data$Age[5:])
c = View(data$Age[5: ])
c = View(data$Age[5:9])
c
data
data$Age$Gender
data$Age,Gender
data$Age
data[data$Age & data$Gender]
data[data$Age == 12 & data$Gender == "F"]
data[data$Age <= 100 & data$Gender == "F"]
c = View(data$Age[5:9])
data[data$Age <= 100 & data$Gender == "F"]
data[data$Age & data$Gender == "F"]
data[data$Gender == "F"]
data[data$Gender == "F"]
data[data$Gender == "F",]
data[data$Gender == "F",2]
data[data$Gender == "F",2,3]
data[data$Gender == "F",2-3]
data[data$Gender == "F",2-3]
data[data$Gender == "M" & data$Age > 20]
data[data$Gender == "M" & data$Age > 20,]
1
data[data$Gender == "M" & data$Age > 20,2]
data[data$Gender == "M" & data$Age > 20,1]
data$Names
data$Age
Names <- c("Ann","Bob","Charlie","Dan","Eva","Felix","George","Heather","Isabel")
Age <- c(12,22,44,12,66,34,23,73,11)
Gender <- c("F","M","M","M","F","M","M","F","F")
data <- data.frame(Names,Age,Gender)
data
data$Gender
tail(data$Age,n=5)
data[5:9,2, drop = FALSE]
data[data$Gender == "F",2-3]
data[data$Gender == "M" & data$Age > 20,1]
data$Age
library(forecast)
data <- gas
data <- gas
head(data)
data
library(forecast)
data <- gas
data
str(data)
summary(data)
# Australian monthly gas production
head(data)
library(forecast)
data <- gas
# Australian monthly gas production
head(data)
# Australian monthly gas production
head(data)
plot(data)
library(fUnitRoots)
install.packages("fUnitRoots")
library(fUnitRoots)
library(forecast)
library(fUnitRoots)
data <- gas
# Australian monthly gas production
head(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
adfTest(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTable(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#showing values
10^(pred$pred)
summary(ARIMAfit)
#predicting the future values
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#showing values
10^(pred$pred)
# Australian monthly gas production
tail(data)
plot(pred)
plot(10^(pred$pred))
pred
plot(forecast(ARIMAfit, h=36))
library(forecast)
library(fUnitRoots)
data <- gas
# Australian monthly gas production
tail(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values
pred <- predict(ARIMAfit, n.ahead = 36)
#predicting the future values for three years i.e 36 month
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#integral. showing the values
10^(pred$pred)
plot(forecast(ARIMAfit, h=36))
library(forecast)
data <-woolyrng
data <-woolyrng
data <- woolyrng
data <- woolyrnq
head(data)
data
library(forecast)
#importing the data
data <- woolyrnq
#looking the data
head(data)
data
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
library(forecast)
library(fUnitRoots)
#importing the data
data <- woolyrnq
#looking the data
head(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values for three years i.e 36 month
pred <- predict(ARIMAfit, n.ahead = 36)
pred
10^(pred$pred)
#integral. showing the values
10^(pred$pred)
plot(forecast(ARIMAfit, h=36))
library(forecast)
library(fUnitRoots)
#importing the data
data <- woolyrnq
#looking the data
head(data)
#looking the data
tail(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values for three years i.e 36 month
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#integral. showing the values
10^(pred$pred)
#predicting the future values for three years i.e 36 month
pred <- predict(ARIMAfit, n.ahead = 12)
pred
#integral. showing the values
10^(pred$pred)
plot(forecast(ARIMAfit, h=36))
plot(forecast(ARIMAfit, h=12))
library(forecast)
library(fUnitRoots)
#importing the data
data <- woolyrnq
#looking the data
tail(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values for three years i.e 12
pred <- predict(ARIMAfit, n.ahead = 12)
pred
#integral. showing the values
10^(pred$pred)
plot(forecast(ARIMAfit, h=12))
library(forecast)
library(fUnitRoots)
#importing the data
data <- woolyrnq
#looking the data
tail(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values for three years i.e 36
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#integral. showing the values
10^(pred$pred)
plot(forecast(ARIMAfit, h=36))
library(boot)
library(car)
library(QuantPsyc)
library(lmtest)
library(sandwich)
library(vars)
library(nortest)
library(MASS)
#checking the present working directory
getwd()
#changing the working directory
setwd("E:\\Helpism\\Project")
#checking the working directory again
getwd()
#loading the housing data
data <- read.csv("Data.csv")
#displaying the top 6 data
head(data)
#summary of data
summary(data)
#checking the null values
sapply(data, function(x) sum(is.na(x)))
#removing the null values
data2 <- na.omit(data)
data <- data2
#checking the null values again
sapply(data, function(x)sum(is.na(x)))
#now, our data is cleaned
#next, we check for the outliers
#displaying the dependent variable through boxplot; to see the outliers
boxplot(data$Price_house)
#checking the outliers through quartile.
quantile(data$Price_house, c(0,0.05,0.1,0.25,0.5,0.75,0.90,0.95,0.99,0.995,1))
#removing the outliers
data2 <- data[data$Price_house <11207235, ]
data <- data2
boxplot(data$Price_house)
#the data has been cleaned and outliers has been removed.
# in next steps, we will fit the data into linear model.
head(data)
fit<- lm(Price_house ~ Taxi_dist + Market_dist +	Hospital_dist  +	Carpet_area  +	Builtup_area +
Parking_type + City_type + Rainfall, data=data)
summary(fit)
#fitting only significant codes
fit <- lm(Price_house ~ Parking_type + City_type, data=data)
summary((fit))
#Multicollinearity Test
#checking the VIF score; vif>2 means presence of multicollinearity
vif(fit)
## Get the predicted or fitted values
fitted(fit)
## MAPE
data$pred <- fitted(fit)
#Calculating MAPE
attach(data)
data
(sum((abs(data$Price_house-data$pred))/data$Price_house))/nrow(data)
#Test for Auto-Correlation
#Durbin Watson Test
#if values are greater than 2, then auto-correlation exists
dwt(fit)
#Test for Homoscedasticity
#Breusch-Pagan Test
#p-value should be greater than 0.05, so we accept null hypothesis, i.e test is homoscedasticity
bptest(fit)
#Normality Test
#Anderson-Darling test
resids <- fit$residuals
resids
ad.test(resids)
#writing in excel
write.csv(data,"house_prediction.csv")
library(boot)
library(car)
library(QuantPsyc)
library(lmtest)
library(sandwich)
library(vars)
library(nortest)
library(MASS)
#loading the housing data
data <- read.csv("Data.csv")
#displaying the top 6 data
head(data)
#summary of data
summary(data)
#checking the null values
sapply(data, function(x) sum(is.na(x)))
library(boot)
library(car)
library(QuantPsyc)
library(lmtest)
library(sandwich)
library(vars)
library(nortest)
library(MASS)
library(MASS)
#checking the present working directory
getwd()
#changing the working directory
setwd("E:\\Helpism\\Project")
#checking the working directory again
getwd()
#loading the housing data
data <- read.csv("Data.csv")
#displaying the top 6 data
head(data)
#summary of data
summary(data)
#checking the null values
sapply(data, function(x) sum(is.na(x)))
#removing the null values
data2 <- na.omit(data)
data <- data2
#checking the null values again
sapply(data, function(x)sum(is.na(x)))
#now, our data is cleaned
#next, we check for the outliers
#displaying the dependent variable through boxplot; to see the outliers
boxplot(data$Price_house)
#checking the outliers through quartile.
quantile(data$Price_house, c(0,0.05,0.1,0.25,0.5,0.75,0.90,0.95,0.99,0.995,1))
#removing the outliers
data2 <- data[data$Price_house <11207235, ]
data <- data2
boxplot(data$Price_house)
#the data has been cleaned and outliers has been removed.
# in next steps, we will fit the data into linear model.
head(data)
fit<- lm(Price_house ~ Taxi_dist + Market_dist +	Hospital_dist  +	Carpet_area  +	Builtup_area +
Parking_type + City_type + Rainfall, data=data)
summary(fit)
#Multicollinearity Test
#checking the VIF score; vif>2 means presence of multicollinearity
vif(fit)
## Get the predicted or fitted values
fitted(fit)
## MAPE
data$pred <- fitted(fit)
#Calculating MAPE
attach(data)
data
(sum((abs(data$Price_house-data$pred))/data$Price_house))/nrow(data)
#Test for Auto-Correlation
#Durbin Watson Test
#if values are greater than 2, then auto-correlation exists
dwt(fit)
#Test for Homoscedasticity
#Breusch-Pagan Test
#p-value should be greater than 0.05, so we accept null hypothesis, i.e test is homoscedasticity
bptest(fit)
#Normality Test
#Anderson-Darling test
resids <- fit$residuals
resids
ad.test(resids)
#writing in excel
write.csv(data,"house_prediction.csv")
library(forecast)
library(fUnitRoots)
library(forecast)
library(fUnitRoots)
data <- gas
# Australian monthly gas production
tail(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values for three years i.e 36 month
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#integral. showing the values
10^(pred$pred)
plot(forecast(ARIMAfit, h=36))
library(forecast)
library(fUnitRoots)
#importing the data
data <- woolyrnq
#looking the data
tail(data)
#plotting the data to see if there is trend
plot(data)
#checking if the data is stationary or non stationary by ADF test
#if p-value > 0.05, data is non-stationary else stationary.
#if data is non-stationary, change to stationary
adfTest(data)
#changing data to stationary
#differencing the data
plot(diff(data))
#checking again the p-value
adfTest(diff(data))
#running AR - I - MA test
ARIMAfit <- auto.arima(log10(data), approximation = TRUE, trace=TRUE)
summary(ARIMAfit)
#predicting the future values for three years i.e 36
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#predicting the future values for three years i.e 36
pred <- predict(ARIMAfit, n.ahead = 36)
pred
#integral. showing the values
10^(pred$pred)
plot(forecast(ARIMAfit, h=36))
